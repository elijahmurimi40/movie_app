{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["formRef","submitButton","errorMessage","successMessage","submitButtonNormal","submitButtonLoading","hideClass","isRequesting","setIsRequesting","updateData","e","preventDefault","removeAddClassess","current","formSerialize","formElement","values","inputs","elements","i","length","input","value","trim","showError","name","Object","getOwnPropertyNames","console","log","showSuccess","removeCollection","addCollection","forEach","element","classList","remove","add","App","useRef","useState","Boolean","Container","style","marginTop","Row","Col","lg","md","sm","xl","xs","Divider","horizontal","Header","as","color","Message","attached","header","className","ref","Form","Input","label","placeholder","type","href","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d35881a.chunk.js","sourcesContent":["import React, { MouseEvent, useRef, useState, MutableRefObject, Dispatch, SetStateAction } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { Divider, Form, Header, Message } from 'semantic-ui-react';\nimport './App.css';\n\nconst submitButtonNormal = ['blue', 'submit'];\nconst submitButtonLoading = ['teal', 'loading'];\nconst hideClass = ['hide'];\n\nlet formRef: MutableRefObject<HTMLFormElement|null>;\nlet submitButton: MutableRefObject<HTMLAnchorElement|null>;\nlet errorMessage: MutableRefObject<HTMLDivElement|null>;\nlet successMessage: MutableRefObject<HTMLDivElement|null>;\n\nlet [isRequesting, setIsRequesting]: [boolean|null, Dispatch<SetStateAction<boolean>>|null] = [null, null];\n\nfunction App() {\n  formRef = useRef<HTMLFormElement>(null);\n  submitButton = useRef<HTMLAnchorElement>(null);\n  errorMessage = useRef<HTMLDivElement>(null);\n  successMessage = useRef<HTMLDivElement>(null);\n\n  [isRequesting, setIsRequesting] = useState(Boolean);\n\n  return (\n    <Container style={{marginTop: '10px'}}>\n      <Row>\n        <Col />\n\n        <Col lg={6} md={8} sm={10} xl={6} xs={12}>\n          <Divider horizontal>\n            <Header as='h3' color='green'>Movie App</Header>\n          </Divider>\n\n          <div>\n            <Message attached header='Update Movie App Info' />\n            <form className='ui form attached fluid segment' ref={formRef}>\n              <Form.Input label='Version Code' placeholder='Verion Code' type='text' name='version_code' />\n              <Form.Input label='Version Name' placeholder='Version Name' type='text' name='version_name'/>\n              <Form.Input label='Password' placeholder='Password' type='password' name='password' />\n              <div className='field'>\n                <div className='ui negative message hide' ref={errorMessage}>All Fields Are Required</div>\n                <div className='ui positive message hide' ref={successMessage}>Success</div>\n                </div>\n              <a href='update' \n                className='ui fluid blue submit button' \n                onClick={updateData} ref={submitButton}\n              >\n                Update\n              </a>\n            </form>\n          </div>\n        </Col>\n\n        <Col />\n      </Row>\n    </Container>\n  );\n}\n\nconst updateData = (e: MouseEvent) => {\n  e.preventDefault();\n  if (isRequesting)\n    return;\n    \n  removeAddClassess(errorMessage.current!!, [], hideClass);\n  removeAddClassess(successMessage.current!!, [], hideClass);\n  removeAddClassess(submitButton.current!!, submitButtonNormal, submitButtonLoading);\n  setIsRequesting!!(true);\n\n  formSerialize(formRef.current!!);\n}\n\nconst formSerialize = (formElement: HTMLFormElement) => {\n  const values: { [key: string]: string|number } = {};\n  const inputs: HTMLFormControlsCollection = formElement.elements;\n\n  for (let i = 0; i < inputs.length; i++) {\n    const input = inputs[i] as HTMLInputElement;\n    if(input.value.trim() === ''){\n      showError();\n      break;\n    }\n\n    values[input.name] = input.value;\n  }\n\n  if(Object.getOwnPropertyNames(values).length !== inputs.length)\n    return;\n  \n  console.log(values);\n  showSuccess();\n}\n\nconst removeAddClassess = (\n  formElement: HTMLElement, removeCollection: Array<string>, addCollection: Array<string>\n  ) => {\n\n  removeCollection.forEach(element => {\n    formElement.classList.remove(element);\n  });\n\n  addCollection.forEach(element => {\n    formElement.classList.add(element);\n  });\n\n}\n\nconst showError = () => {\n  removeAddClassess(errorMessage.current!!, hideClass, []);\n  removeAddClassess(successMessage.current!!, [], hideClass);\n  removeAddClassess(submitButton.current!!, submitButtonLoading, submitButtonNormal);\n  setIsRequesting!!(false);\n}\n\nconst showSuccess = () => {\n  removeAddClassess(errorMessage.current!!, [], hideClass);\n  removeAddClassess(successMessage.current!!, hideClass, []);\n  removeAddClassess(submitButton.current!!, submitButtonLoading, submitButtonNormal);\n  setIsRequesting!!(false);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}