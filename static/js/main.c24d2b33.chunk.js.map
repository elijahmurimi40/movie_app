{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","formRef","useRef","Container","style","marginTop","Row","Col","lg","md","sm","xl","xs","Divider","horizontal","Header","as","color","Message","attached","header","className","ref","Form","Input","label","placeholder","type","name","href","onClick","e","preventDefault","values","formElement","inputs","elements","i","length","input","value","formSerialize","current","fetch","method","body","JSON","stringify","then","response","console","log","data","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PA+DeA,MA/Cf,WACE,IAAIC,EAAUC,iBAAwB,MAiBtC,OACE,cAACC,EAAA,EAAD,CAAWC,MAAO,CAACC,UAAW,QAA9B,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,IAEA,eAACA,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAAtC,UACE,cAACC,EAAA,EAAD,CAASC,YAAU,EAAnB,SACE,cAACC,EAAA,EAAD,CAAQC,GAAG,KAAKC,MAAM,QAAtB,yBAGF,gCACE,cAACC,EAAA,EAAD,CAASC,UAAQ,EAACC,OAAO,0BACzB,uBAAMC,UAAU,iCAAiCC,IAAKrB,EAAtD,UACE,cAACsB,EAAA,EAAKC,MAAN,CAAYC,MAAM,eAAeC,YAAY,cAAcC,KAAK,OAAOC,KAAK,iBAC5E,cAACL,EAAA,EAAKC,MAAN,CAAYC,MAAM,eAAeC,YAAY,eAAeC,KAAK,OAAOC,KAAK,iBAC7E,cAACL,EAAA,EAAKC,MAAN,CAAYC,MAAM,WAAWC,YAAY,WAAWC,KAAK,WAAWC,KAAK,aACzE,mBAAGC,KAAK,SAASR,UAAU,8BAA8BS,QA/BlD,SAACC,GAClBA,EAAEC,iBACF,IAAIC,EAjBc,SAACC,GAIrB,IAHA,IAAMD,EAA2C,GAC3CE,EAAqCD,EAAYE,SAE9CC,EAAI,EAAGA,EAAIF,EAAOG,OAAQD,IAAK,CACtC,IAAME,EAAQJ,EAAOE,GACrBJ,EAAOM,EAAMX,MAAQW,EAAMC,MAG7B,OAAOP,EAQQQ,CAAcxC,EAAQyC,SACnCC,MAAM,6DAA8D,CAClEC,OAAQ,OACRC,KAAMC,KAAKC,UAAUd,KAEtBe,MAAK,SAASC,GACbC,QAAQC,IAAIF,MAEbD,MAAK,SAASI,GACbF,QAAQC,IAAIC,OAoBJ,6BAON,cAAC7C,EAAA,EAAD,UC3CO8C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,cCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c24d2b33.chunk.js","sourcesContent":["import React, { MouseEvent, useRef } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { Divider, Form, Header, Message } from 'semantic-ui-react';\n\nconst formSerialize = (formElement: HTMLFormElement) => {\n  const values: { [key: string]: string|number } = {};\n  const inputs: HTMLFormControlsCollection = formElement.elements;\n\n  for (let i = 0; i < inputs.length; i++) {\n    const input = inputs[i] as HTMLInputElement\n    values[input.name] = input.value;\n  }\n  \n  return values;\n}\n\nfunction App() {\n  let formRef = useRef<HTMLFormElement>(null);\n\n  const updateData = (e: MouseEvent) => {\n    e.preventDefault();\n    let values = formSerialize(formRef.current!!)\n    fetch('https://movieappversioncodeandnamephp.herokuapp.com/insert', {\n      method: 'POST',\n      body: JSON.stringify(values)\n    })\n    .then(function(response) {\n      console.log(response);\n    })\n    .then(function(data) {\n      console.log(data);\n    });\n  };\n\n  return (\n    <Container style={{marginTop: '10px'}}>\n      <Row>\n        <Col />\n\n        <Col lg={6} md={8} sm={10} xl={6} xs={12}>\n          <Divider horizontal>\n            <Header as='h3' color='green'>Movie App</Header>\n          </Divider>\n\n          <div>\n            <Message attached header='Update Movie App Info' />\n            <form className='ui form attached fluid segment' ref={formRef}>\n              <Form.Input label='Version Code' placeholder='Verion Code' type='text' name='version_code' />\n              <Form.Input label='Version Name' placeholder='Version Name' type='text' name='version_name'/>\n              <Form.Input label='Password' placeholder='Password' type='password' name='password' />\n              <a href='update' className='ui fluid blue submit button' onClick={updateData}>\n                Update\n              </a>\n            </form>\n          </div>\n        </Col>\n\n        <Col />\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}