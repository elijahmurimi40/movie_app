{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["formRef","submitButton","errorMessage","successMessage","submitButtonNormal","submitButtonLoading","hideClass","isRequesting","setIsRequesting","updateData","e","preventDefault","removeAddClassess","current","formSerialize","formElement","values","inputs","elements","i","length","input","value","trim","showError","name","Object","getOwnPropertyNames","dataValues","finalValues","axios","post","headers","then","res","status","data","error","undefined","message","showSuccess","catch","err","removeCollection","addCollection","forEach","element","classList","remove","add","errorMsg","innerText","App","useRef","useState","Boolean","Container","style","marginTop","Row","Col","lg","md","sm","xl","xs","Divider","horizontal","Header","as","color","Message","attached","header","className","ref","Form","Input","label","placeholder","type","href","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1580c55b.chunk.js","sourcesContent":["import axios from 'axios';\nimport React, { MouseEvent, useRef, useState, MutableRefObject, Dispatch, SetStateAction } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { Divider, Form, Header, Message } from 'semantic-ui-react';\nimport './App.css';\n\nconst submitButtonNormal = ['blue', 'submit'];\nconst submitButtonLoading = ['teal', 'loading'];\nconst hideClass = ['hide'];\n\nlet formRef: MutableRefObject<HTMLFormElement|null>;\nlet submitButton: MutableRefObject<HTMLAnchorElement|null>;\nlet errorMessage: MutableRefObject<HTMLDivElement|null>;\nlet successMessage: MutableRefObject<HTMLDivElement|null>;\n\nlet [isRequesting, setIsRequesting]: [boolean|null, Dispatch<SetStateAction<boolean>>|null] = [null, null];\n\nfunction App() {\n  formRef = useRef<HTMLFormElement>(null);\n  submitButton = useRef<HTMLAnchorElement>(null);\n  errorMessage = useRef<HTMLDivElement>(null);\n  successMessage = useRef<HTMLDivElement>(null);\n\n  [isRequesting, setIsRequesting] = useState(Boolean);\n\n  return (\n    <Container style={{marginTop: '10px'}}>\n      <Row>\n        <Col />\n\n        <Col lg={6} md={8} sm={10} xl={6} xs={12}>\n          <Divider horizontal>\n            <Header as='h3' color='green'>Movie App</Header>\n          </Divider>\n\n          <div>\n            <Message attached header='Update Movie App Info' />\n            <form className='ui form attached fluid segment' ref={formRef}>\n              <Form.Input label='Version Code' placeholder='Verion Code' type='text' name='version_code' />\n              <Form.Input label='Version Name' placeholder='Version Name' type='text' name='version_name'/>\n              <Form.Input label='Password' placeholder='Password' type='password' name='password' />\n              <div className='field'>\n                <div className='ui negative message hide' ref={errorMessage}>All Fields Are Required</div>\n                <div className='ui positive message hide' ref={successMessage}>Successfully Updated</div>\n                </div>\n              <a href='update' \n                className='ui fluid blue submit button' \n                onClick={updateData} ref={submitButton}\n              >\n                Update\n              </a>\n            </form>\n          </div>\n        </Col>\n\n        <Col />\n      </Row>\n    </Container>\n  );\n}\n\nconst updateData = (e: MouseEvent) => {\n  e.preventDefault();\n  if (isRequesting)\n    return;\n    \n  removeAddClassess(errorMessage.current!!, [], hideClass);\n  removeAddClassess(successMessage.current!!, [], hideClass);\n  removeAddClassess(submitButton.current!!, submitButtonNormal, submitButtonLoading);\n  setIsRequesting!!(true);\n\n  formSerialize(formRef.current!!);\n}\n\nconst formSerialize = (formElement: HTMLFormElement) => {\n  const values: { [key: string]: string|number } = {};\n  const inputs: HTMLFormControlsCollection = formElement.elements;\n\n  for (let i = 0; i < inputs.length; i++) {\n    const input = inputs[i] as HTMLInputElement;\n    if(input.value.trim() === ''){\n      showError('All Fields Are Required');\n      break;\n    }\n\n    values[input.name] = input.value;\n  }\n\n  if(Object.getOwnPropertyNames(values).length !== inputs.length)\n    return;\n  \n  const dataValues: { [key: string]: string|number } = {}\n  dataValues['version_code'] = values['version_code'];\n  dataValues['version_name'] = values['version_name'];\n\n  const finalValues: { [key: string]: string|number|object } = {};\n  finalValues['password'] = values['password'];\n  finalValues['data'] = dataValues;\n\n  const axiosConfig = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  axios.post('https://movieappversioncodeandnamephp.herokuapp.com/insert', finalValues, axiosConfig)\n    .then(res => {\n      const status = res.data.error;\n\n      if(status !== undefined && status.status !== 200) {\n        showError(res.data.error.message);\n      } else {\n        showSuccess();\n      }\n    })\n    .catch(err => {\n      /**\n       * if(err.response) {\n       * // client received an error response (5xx, 4xx)\n       * } else if(err.request) {\n       * // client never received a response, or request never left\n       * } else {\n       * // anything else\n       * } \n       */\n    showError('Error connecting to server try again.');\n    });\n}\n\nconst removeAddClassess = (\n  formElement: HTMLElement, removeCollection: Array<string>, addCollection: Array<string>\n  ) => {\n\n  removeCollection.forEach(element => {\n    formElement.classList.remove(element);\n  });\n\n  addCollection.forEach(element => {\n    formElement.classList.add(element);\n  });\n\n}\n\nconst showError = (errorMsg: string) => {\n  errorMessage.current!!.innerText = errorMsg;\n  removeAddClassess(errorMessage.current!!, hideClass, []);\n  removeAddClassess(successMessage.current!!, [], hideClass);\n  removeAddClassess(submitButton.current!!, submitButtonLoading, submitButtonNormal);\n  setIsRequesting!!(false);\n}\n\nconst showSuccess = () => {\n  removeAddClassess(errorMessage.current!!, [], hideClass);\n  removeAddClassess(successMessage.current!!, hideClass, []);\n  removeAddClassess(submitButton.current!!, submitButtonLoading, submitButtonNormal);\n  setIsRequesting!!(false);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}